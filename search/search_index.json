{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to go tutorial #","title":"Home"},{"location":"index.html#welcome-to-go-tutorial","text":"","title":"Welcome to go tutorial"},{"location":"go/arrays.html","text":"Go Arrays #","title":"Arrays"},{"location":"go/arrays.html#go-arrays","text":"","title":"Go Arrays"},{"location":"go/maps.html","text":"Go maps #","title":"GoMaps"},{"location":"go/maps.html#go-maps","text":"","title":"Go maps"},{"location":"go/slices.html","text":"Go slices # used to store values of saem data type. flixible than arrays. i.e. length of an array can grow or shrink declare a slice: # slice_name := []datatype{values} letters := []string{\"a\", \"b\", \"c\", \"d\"} numbers := []int{1, 3, 3, 4, 5} create slice using make func: # declaring slice using make : slice_name := make([]type, length, capacity) capacity equal to length if not defined example: package main import ( \"fmt\" ) func main() { testclice := make([]int, 0) fmt.Printf(\"length = %d\\n\", len(testclice)) fmt.Printf(\"capacity = %d\\n\", cap(testclice)) testclice = append(testclice, 1, 2, 3, 4, 5) fmt.Println(testclice) fmt.Printf(\"length after append = %d\\n\", len(testclice)) fmt.Printf(\"capacity after append = %d\\n\", cap(testclice)) fmt.Println(\"----------------------------\") testclice1 := make([]int, 2, 3) fmt.Printf(\"length = %d\\n\", len(testclice1)) fmt.Printf(\"capacity = %d\\n\", cap(testclice1)) testclice1 = append(testclice1, 1, 2, 3 ,4 , 5 ) fmt.Println(testclice1) fmt.Printf(\"length after append = %d\\n\", len(testclice1)) fmt.Printf(\"capacity after append = %d\\n\", cap(testclice1)) } output: length = 0 capacity = 0 [1 2 3 4 5] length after append = 5 capacity after append = 6 ---------------------------- length = 2 capacity = 3 [0 0 1 2 3 4 5] length after append = 7 capacity after append = 8 creating a slice from an array: # var myarray = [length]datatype{values} // An array myslice := myarray[start:end] // A slice made from the array example: package main import ( \"fmt\" ) func main() { testarray := [5]int{1, 2, 3, 4, 5} testslice := testarray[3:5] fmt.Printf(\"length = %d\\n\", len(testslice)) fmt.Printf(\"capacity = %d\\n\", cap(testslice)) fmt.Println(testslice) } output: length = 2 capacity = 2 [4 5]","title":"Slices"},{"location":"go/slices.html#go-slices","text":"used to store values of saem data type. flixible than arrays. i.e. length of an array can grow or shrink","title":"Go slices"},{"location":"go/slices.html#declare-a-slice","text":"slice_name := []datatype{values} letters := []string{\"a\", \"b\", \"c\", \"d\"} numbers := []int{1, 3, 3, 4, 5}","title":"declare a slice:"},{"location":"go/slices.html#create-slice-using-make-func","text":"declaring slice using make : slice_name := make([]type, length, capacity) capacity equal to length if not defined example: package main import ( \"fmt\" ) func main() { testclice := make([]int, 0) fmt.Printf(\"length = %d\\n\", len(testclice)) fmt.Printf(\"capacity = %d\\n\", cap(testclice)) testclice = append(testclice, 1, 2, 3, 4, 5) fmt.Println(testclice) fmt.Printf(\"length after append = %d\\n\", len(testclice)) fmt.Printf(\"capacity after append = %d\\n\", cap(testclice)) fmt.Println(\"----------------------------\") testclice1 := make([]int, 2, 3) fmt.Printf(\"length = %d\\n\", len(testclice1)) fmt.Printf(\"capacity = %d\\n\", cap(testclice1)) testclice1 = append(testclice1, 1, 2, 3 ,4 , 5 ) fmt.Println(testclice1) fmt.Printf(\"length after append = %d\\n\", len(testclice1)) fmt.Printf(\"capacity after append = %d\\n\", cap(testclice1)) } output: length = 0 capacity = 0 [1 2 3 4 5] length after append = 5 capacity after append = 6 ---------------------------- length = 2 capacity = 3 [0 0 1 2 3 4 5] length after append = 7 capacity after append = 8","title":"create slice using make func:"},{"location":"go/slices.html#creating-a-slice-from-an-array","text":"var myarray = [length]datatype{values} // An array myslice := myarray[start:end] // A slice made from the array example: package main import ( \"fmt\" ) func main() { testarray := [5]int{1, 2, 3, 4, 5} testslice := testarray[3:5] fmt.Printf(\"length = %d\\n\", len(testslice)) fmt.Printf(\"capacity = %d\\n\", cap(testslice)) fmt.Println(testslice) } output: length = 2 capacity = 2 [4 5]","title":"creating a slice from an array:"}]}